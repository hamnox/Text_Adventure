#keep reading this

import re
# import regular expressions
token_pat = re.compile("\s*(?:(\d+)|(.))")

def parse(program):
    global token, next
    next = tokenize(program).next
    token = next()
    return expression()

def tokenize(program):
    for number, operator in token_pat.findall(program):
        if number:
            yield literal_token(number)
        elif operator ==“+”
            yield operator_add_token()
        else:
            raise SyntaxError(“unknown operator”)
        yield end_token

def expression(rightbind=0):
    global token
    t = token
    token = next()
    left = t.nulldenote()
    while rightbind < token.leftbind:
        t = token
        token = next()
        left = t.leftdenote()
return left

class literal_token:
    def __init__(self, value):
        self.value = int(value) # this is if literal token is an int. Ours are ref_tokens i think
    def nulldenote(self):
        return self.value

class operator_add_token:
    leftbind = 10
    def led(self, left):
        right = expression(10)
        return left + right

class end_token:
    leftbind = 0